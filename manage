#!/usr/bin/env python3

import os
import subprocess
import click
import shutil
from dotenv import load_dotenv
from InquirerPy import prompt 

load_dotenv()

default_model_dir = os.getenv("MODEL_DIR", "models")
default_docker_dir = os.getenv("DOCKER_DIR", "docker")

@click.group()
@click.option('--docker-dir', default=default_docker_dir, help='Directory containing docker-compose files')
@click.option('--model-dir', default=default_model_dir, help='Directory containing models')
@click.pass_context
def cli(ctx, docker_dir, model_dir):
    ctx.ensure_object(dict)
    ctx.obj["docker_dir"] = docker_dir
    ctx.obj["model_dir"] = model_dir

    if not os.path.exists(model_dir):
        os.makedirs(model_dir)

    if not os.path.exists("data"):
        os.makedirs("data")

@cli.command()
@click.pass_context
def install(ctx):
    from scripts.compose import compose

    docker_dir, model_dir = ctx.obj["docker_dir"], ctx.obj["model_dir"]

    if not os.path.exists("docker-compose.yml"):
        questions = [
            {
                "type": "input",
                "name": "username",
                "message": "Enter admin user",
            },
            {
                "type": "password",
                "name": "password",
                "message": "Enter admin password",
            },
        ]

        answers = prompt(questions)
        os.environ["OASIS_ADMIN_USER"] = answers["username"]
        os.environ["OASIS_ADMIN_PASS"] = answers["password"]

        click.echo("Creating compose file")
    else:
        click.echo("Recreating compose file")

    compose(docker_dir=docker_dir, model_dir=model_dir)

    click.echo("Starting docker containers...")
    subprocess.run(["docker-compose", "restart"])
    subprocess.run(["docker-compose", "up", "--remove-orphans", "-d"])

@cli.command()
def uninstall():
    if not os.path.exists("docker-compose.yml"):
        click.echo("No docker-compose file found")
        return

    questions = [
        {
            "type": "confirm",
            "name": "confirm",
            "message": "Are you sure you want to uninstall? This will delete all data",
        },
    ]
    answers = prompt(questions)
    if not answers["confirm"]:
        return

    click.echo("Removing containers and volumes")
    subprocess.run(["docker-compose", "down", "-v"])

    click.echo("Removing compose file")
    os.remove("docker-compose.yml")

    if os.path.exists("data"):
        click.echo("Removing data directory")
        shutil.rmtree("data")

@cli.command()
@click.pass_context
def compose(ctx):
    from scripts.compose import compose

    docker_dir, model_dir = ctx.obj["docker_dir"], ctx.obj["model_dir"]

    click.echo("Creating compose file")
    compose(docker_dir=docker_dir, model_dir=model_dir)

@cli.command()
@click.option('--storage-account-name', default=os.getenv("STORAGE_ACCOUNT_NAME"), help='Azure storage account name')
@click.option('--storage-account-key', default=os.getenv("STORAGE_ACCOUNT_KEY"), help='Azure storage account key')
@click.option('--storage-container-name', default=os.getenv("STORAGE_CONTAINER_NAME"), help='Azure storage container name')
@click.pass_context
def download(ctx, storage_account_name, storage_account_key, storage_container_name):
    from scripts.download import download_models

    docker_dir, model_dir = ctx.obj["docker_dir"], ctx.obj["model_dir"]

    download_models(
        storage_account_name=storage_account_name,
        storage_account_key=storage_account_key,
        storage_container_name=storage_container_name,
        local_download_path=model_dir
    )

if __name__ == "__main__":
    cli()