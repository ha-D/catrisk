#!/usr/bin/env python3

import json
import os
import shutil
import subprocess

import click
from InquirerPy import prompt

config = {}


@click.group()
def cli():
    global config

    with open("config.json", "r") as f:
        config = json.load(f)

    if not os.path.exists(config['model_dir']):
        os.makedirs(config['model_dir'])

    try:
        shutil.chown(config['model_dir'], 'oasis', 'oasis')
    except:
        print("Failed chowning model directory")

    if not os.path.exists("data"):
        os.makedirs("data")


@cli.command()
def install():
    from scripts.compose import compose

    if not os.path.exists("docker-compose.yml"):
        questions = [
            {
                "type": "input",
                "name": "username",
                "message": "Enter admin user",
            },
            {
                "type": "password",
                "name": "password",
                "message": "Enter admin password",
            },
        ]

        answers = prompt(questions)
        os.environ["OASIS_ADMIN_USER"] = answers["username"]
        os.environ["OASIS_ADMIN_PASS"] = answers["password"]

        click.echo("Creating compose file")
    else:
        click.echo("Recreating compose file")

    compose(config)

    click.echo("Starting docker containers...")
    subprocess.run(["docker-compose", "up", "--build", "--remove-orphans", "--force-recreate", "-d"])


@cli.command()
def uninstall():
    if not os.path.exists("docker-compose.yml"):
        click.echo("No docker-compose file found")
        return

    questions = [
        {
            "type": "confirm",
            "name": "confirm",
            "message": "Are you sure you want to uninstall? This will delete all data",
        },
    ]
    answers = prompt(questions)
    if not answers["confirm"]:
        return

    click.echo("Removing containers and volumes")
    subprocess.run(["docker-compose", "down", "-v"])

    click.echo("Removing compose file")
    os.remove("docker-compose.yml")

    if os.path.exists("data"):
        click.echo("Removing data directory")
        shutil.rmtree("data")


@cli.command()
def compose():
    from scripts.compose import compose

    click.echo("Creating compose file")
    compose(config)


@cli.command()
def download():
    from scripts.download import download_models

    download_models(config)

@cli.command()
@click.argument('args', nargs=-1)
def config(args):
    if len(args) > 2:
        click.echo("Too many arguments")
        return
    
    if len(args) == 0:
        click.echo(json.dumps(config, indent=4))
        return
    elif len(args) == 1:
        click.echo(config[args[0]])
        return
    elif len(args) == 2:
        config[args[0]] = args[1]
        with open("config.json", "w") as f:
            json.dump(config, f, indent=4)
        click.echo(f"Updated config '{args[0]}' to '{args[1]}'")
        return


if __name__ == "__main__":
    cli()
